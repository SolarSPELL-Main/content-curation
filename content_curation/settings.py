"""
Django settings for content_curation project.
Generated by 'django-admin startproject' using Django 3.0.4.
For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import environ
from datetime import datetime

env = environ.Env()
env.read_env()
now = datetime.now()
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["10.208.67.234","localhost","127.0.0.1","ss-chiefriver.dhcp.asu.edu"]

CONTENTS_ROOT = '/'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    'rest_framework',
    'frontend',
    'backend',
    'django_filters',
    'widget_tweaks',
    'sslserver',

    'django_crontab',
    'dbbackup',

    'django_clamd',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'content_curation.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'content_curation.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': env.db()
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Phoenix'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_DIRS = [
    BASE_DIR + "frontend/static",
]

# Needed so the frontend can properly display images
X_FRAME_OPTIONS = 'SAMEORIGIN'

# Google Authentication
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend'
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

LOGIN_REDIRECT_URL = '/static/index.html#/profile'

REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
    ),
     'EXCEPTION_HANDLER': 'backend.standardize_format.standard_exception_handler'
}

# Logging Configuration
LOG_FILE = os.path.join(BASE_DIR, 'logs', 'log_file{:%d_%m_%Y}.log'.format(now))

LOGGING = {
    'version': 1,
    # Version of logging
    'disable_existing_loggers': False,

    'formatters': {
        'Simple_Formatters': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        }
    },

    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'backend.logging.FileHandler',
            'filename': LOG_FILE,
            'formatter': 'Simple_Formatters',
        },

        'console': {
            'level':'INFO',
            'class': 'logging.StreamHandler',
        },
    },
 'root': {
        'handlers': ['console','file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'propagate': True,
             'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO')    
             },
    },

}

# Scheduled Database Backup
DB_BACKUP_DIR =  BASE_DIR + '/backup/'
DB_BACKUP_FILENAME = '{datetime}-{databasename}.psql'
CRON_LOG_FILE = BASE_DIR + '/logs/cron_{:%d_%m_%Y}.log'.format(now)

DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location':DB_BACKUP_DIR}
DBBACKUP_FILENAME_TEMPLATE = DB_BACKUP_FILENAME

CRONJOBS = [
    ('0 19 * * *', 'content_curation.cron.db_backup',
     '>>' + CRON_LOG_FILE)
]
CRONTAB_COMMAND_SUFFIX = '2>&1'
CRONTAB_DJANGO_PROJECT_NAME = 'content_curation'

#Clamav Content File Virus Validation
CLAMD_SOCKET = '/var/run/clamav/clamd.ctl'
CLAMD_USE_TCP = False
CLAMD_TCP_SOCKET = 3310
CLAMD_TCP_ADDR = '127.0.0.1'
CLAMD_ENABLED = True
